TODO LIST FOR VGAEMU
====================

When this list is done, then it makes sense to move the VGA emulator from this
branch to the regular development folder and/or even release it:

* Package a working monitor.out and a playable Q-TRIS and/or make
  a small FAT32 mountable file with the goal of having a small
  instruction / documentation somewhere, that brings a playable
  Q-Tris right after downloading the repo. (Might be part of
  the overall "getting started") routine as a motivational element.

* Fix the bug, that CTRL+C only works, when the Monitor has been loaded
  via the command line, but not, when it has been loaded via the "load"
  command. (Ditto: Command line attach vs. interactive "attach" command.)

* Add basic speed regulators (similar to how DOSBox does it?). For finding
  out a somewhat exact regulation, e.g. to play Q-TRIS in the exactly same
  speed as on hardware (currently, the Emulator is faster): Add a new
  device to the hardware, that counts the amount of executed instructions.
  This plus the 50 MHz counter plus an instrumented version of Q-TRIS 
  (switchable, using defines) shall give us after a longer round of playing
  a pretty exact view, how the command throughput on hardware is. This can
  be then emulated using the high precision counter and frequency commands
  from SDL. Maybe even an "auto" mode can be implemented, that tries to
  adjust the speed in realtime, depending on the machine where the
  Emulator runs. Probably the speed in the Emulator depends on the display
  size (640x480 vs ...), so we need to take care of that, too.

  As a step one, I could start by adding a "instructions per second"
  measurement mechanism to the emulator first, and then (later) use the above
  mentioned combination of an instruction counter and the tick counter
  to have a calibrated and fixed "hardware instructions per second". The
  later is then stored as a constant in the emulator and used to
  automatically adjust the emulator speed to the host's CPU.

  While adding the hardware registers (VHDL) for the instruction counter,
  I might want to seize the opportunity and also do the very first
  bullet point from TODO.txt.

* Multiple Window sizes (640x480, Doubled, 16:9, ..., even free sizing?)

* Full Screen mode (aspect ratio can be chosen: 4:3 or 16:9)

* Emulate all VGA register commands

* Bring the keyboard emulation on the same level, as the existing hardware
  PS2/USB support, including: German umlauts, U.S. keyboard layout, Mac
  keyboard nitty gritties (e.g. < > Â° ^).

* Implement regular thread safety (e.g. the equivalents of Critical Sections
  when accessing registers).

* Regular starting/stopping of app (inter thread-communication necessary)

Optional:

* Add a make file option that makes a macOS APP bundle

* Test, if compilation and running works under Linux (e.g. Ubuntu)

* Test, if compilation and running works under Windows

* Use sysdef.h also in the main file qnice.c
